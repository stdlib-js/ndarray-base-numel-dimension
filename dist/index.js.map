{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar normalizeIndex = require( '@stdlib/ndarray-base-normalize-index' );\nvar ndims = require( '@stdlib/ndarray-base-ndims' );\nvar getShape = require( '@stdlib/ndarray-base-shape' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Returns the size (i.e., number of elements) of a specified dimension for a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @param {integer} dim - dimension index\n* @throws {TypeError} first argument must be an ndarray having one or more dimensions\n* @throws {RangeError} dimension index exceeds the number of dimensions\n* @returns {NonNegativeInteger} dimension size\n*\n* @example\n* var zeros = require( '@stdlib/ndarray-zeros' );\n*\n* var out = numelDimension( zeros( [ 4, 2, 3 ] ), 0 );\n* // returns 4\n*/\nfunction numelDimension( x, dim ) {\n\tvar N;\n\tvar d;\n\n\t// Retrieve array meta data:\n\tN = ndims( x );\n\n\t// Check whether we were provided a zero-dimensional array...\n\tif ( N === 0 ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray having one or more dimensions. Number of dimensions: %d.', N ) );\n\t}\n\t// Normalize the dimension index:\n\td = normalizeIndex( dim, N-1 );\n\tif ( d === -1 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Dimension index exceeds the number of dimensions. Number of dimensions: %d. Value: `%d`.', N, dim ) );\n\t}\n\t// Return the dimension size:\n\treturn getShape( x, false )[ d ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = numelDimension;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the size (i.e., number of elements) of a specified dimension for a provided ndarray.\n*\n* @module @stdlib/ndarray-base-numel-dimension\n*\n* @example\n* var zeros = require( '@stdlib/ndarray-zeros' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n*\n* var d = numelDimension( zeros( [ 4, 2, 3 ] ), 0 );\n* // returns 4\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAiB,QAAS,sCAAuC,EACjEC,EAAQ,QAAS,4BAA6B,EAC9CC,EAAW,QAAS,4BAA6B,EACjDC,EAAS,QAAS,uBAAwB,EAoB9C,SAASC,EAAgBC,EAAGC,EAAM,CACjC,IAAIC,EACAC,EAMJ,GAHAD,EAAIN,EAAOI,CAAE,EAGRE,IAAM,EACV,MAAM,IAAI,UAAWJ,EAAQ,+GAAgHI,CAAE,CAAE,EAIlJ,GADAC,EAAIR,EAAgBM,EAAKC,EAAE,CAAE,EACxBC,IAAM,GACV,MAAM,IAAI,WAAYL,EAAQ,6GAA8GI,EAAGD,CAAI,CAAE,EAGtJ,OAAOJ,EAAUG,EAAG,EAAM,EAAGG,CAAE,CAChC,CAKAT,EAAO,QAAUK,ICjCjB,IAAIK,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "normalizeIndex", "ndims", "getShape", "format", "numelDimension", "x", "dim", "N", "d", "main"]
}
